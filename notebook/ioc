	在Spring中，Spring IOC 提供了一个基本的JavaBean容器，通过IOC模式管理依赖关系，并通过依赖注入和AOP切面增强了
为JavaBean这样的POJO对象赋予事务管理、声明周期管理等基本功能。
	在应用开发中，以应用开发人员的身份设计组件时，往往需要引用和调用其他组件的服务，这种依赖关系如果固化在组件设计中，
就会造成依赖关系的僵化和维护难度的增加，这个时候，如果使用IOC容器，把资源获取的方向反转，让IOC容器主动管理这些依赖关系，
将这些依赖关系注入到组件中，那么会让这些依赖关系的适配和管理更加灵活。在具体的注入实现中，接口注入、setter注入、构造器注入
是主要的注入方式。在Spring的IOC设计中，setter注入和构造器注入是主要的注入方式，为了防止注入异常，Spring IOC容器还提供了
特定的依赖检查。
	在Spring IOC容器的设计中，我们可以看到两个主要的容器系列，一个是实现BeanFactory接口的简单容器系列，这系列容器只实现
了容器的基本功能；另一个是ApplicationContext应用上下文，它作为容器的高级形态而存在。应用上下文在简单容器的基础上，增加了许多
面向框架的特性，同时对应用环境做了许多配置。
	Spring有各式各样的IOC容器的实现供用户选择和使用。
	在Spring提供的基本IOC容器的接口定义和实现的基础上，Spring通过定义BeanDefinition来管理基于Spring的应用中的各种对象以及
他们之间的相互依赖关系。BeanDefinition抽象了我们对Bean的定义，是让容器起作用的主要数据类型。IOC容器是用来管理对象依赖关系的，
对IOC容器来说，BeanDefinition就是对依赖反转模式中管理的对象依赖关系的数据抽象，也是容器实现依赖反转功能的核心数据结构，
依赖反转功能都是围绕对这个BeanDefinition的处理完成的。这些BeanDefinition就像是容器里面装的水，有了这些基本数据，容器才能够发挥作用。
	同时在使用IOC容器时，了解BeanFactory和ApplicationContext之间的区别对我们理解和使用IOC容器比较重要。弄清楚这两种重要容器
之间的区别和联系，意味着我们具有了辨别容器系列中不通容器产品的能力。还有一个好处就是，如果需要定制特定功能的容器实现，也能比较方便
地在容器系列中找到一款恰当的产品作为参考，不需要重新设计。
	IOC容器设计图(参照图片‘IOC容器的接口设计’)
	1)在图中从接口BeanFactory到HierarchicalBeanFactory，再到ConfigurableBeanFactory，是一条主要的BeanFactory设计路径。
在这条接口设计路径中，BeanFactory接口定义了基本的IOC容器的规范。在这个接口定义中，包括了getBean()这样的IOC容器的基本方法(通过
这个方法可以从容器中取到Bean)。而HierrarchicalBeanFactory接口在继承了BeanFactory的基本接口之后，增加了getParentBeanFactory的接口功能，
是BeanFactory具备了双亲IOC容器的管理功能。在接下来的ConfigurableBeanFactory接口中，主要定义了一些对BeanFactory的配置功能，
比如通过setParentBeanFactory()设置双亲IOC容器，通过addBeanPostProcessor()配置Bean后置处理器等等。通过这些接口设计的叠加，定义了
BeanFactory就是简单IOC容器的基本功能。